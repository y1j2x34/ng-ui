.grid_container .grid_body_table,
.grid_container .grid_header_table {
  margin-bottom: 0;
  table-layout: fixed; }
  .grid_container .grid_body_table tbody > tr, .grid_container .grid_body_table thead > tr,
  .grid_container .grid_header_table tbody > tr,
  .grid_container .grid_header_table thead > tr {
    height: 1px; }
    .grid_container .grid_body_table tbody > tr > td, .grid_container .grid_body_table tbody > tr > th, .grid_container .grid_body_table thead > tr > td, .grid_container .grid_body_table thead > tr > th,
    .grid_container .grid_header_table tbody > tr > td,
    .grid_container .grid_header_table tbody > tr > th,
    .grid_container .grid_header_table thead > tr > td,
    .grid_container .grid_header_table thead > tr > th {
      background-clip: padding-box;
      height: 1px; }
    .grid_container .grid_body_table tbody > tr > th, .grid_container .grid_body_table thead > tr > th,
    .grid_container .grid_header_table tbody > tr > th,
    .grid_container .grid_header_table thead > tr > th {
      font-weight: bold; }

.grid_container .grid_body_table {
  border-bottom: 0; }
  .grid_container .grid_body_table > tbody > tr:last-child > td {
    border-bottom: 0; }

.grid_container .grid_body {
  border-bottom: 1px solid #ddd; }

.grid_container .ui_grid_head_rendered--accordion,
.grid_container .ui_grid_cell_rendered--accordion {
  text-align: center;
  padding: 0;
  vertical-align: middle; }

.grid_container .ui_grid_cell_rendered--sequence,
.grid_container .ui_grid_head_rendered--sequence {
  padding: 0;
  text-align: center;
  width: 2em;
  max-width: 2em;
  min-width: 2em;
  overflow-x: hidden;
  vertical-align: middle;
  text-overflow: ellipsis;
  word-wrap: normal; }

.grid_container .ui_grid_cell_rendered--check,
.grid_container .ui_grid_head_rendered--check {
  padding: 0; }
  .grid_container .ui_grid_cell_rendered--check .grid_checkbox_label,
  .grid_container .ui_grid_cell_rendered--check .grid_radio_label,
  .grid_container .ui_grid_head_rendered--check .grid_checkbox_label,
  .grid_container .ui_grid_head_rendered--check .grid_radio_label {
    display: block;
    text-align: center;
    margin: 0;
    min-height: 100%;
    height: auto !important;
    height: 100%;
    position: relative; }
    .grid_container .ui_grid_cell_rendered--check .grid_checkbox_label input,
    .grid_container .ui_grid_cell_rendered--check .grid_radio_label input,
    .grid_container .ui_grid_head_rendered--check .grid_checkbox_label input,
    .grid_container .ui_grid_head_rendered--check .grid_radio_label input {
      position: absolute;
      margin: -6px -6px 0;
      left: 50%;
      top: 50%;
      width: 12px;
      height: 12px; }

.grid_container.fix-header .grid_header_table {
  border-bottom-width: 2px; }
  .grid_container.fix-header .grid_header_table .grid_head th {
    border-bottom-width: 1px; }

.grid_container.fix-header .grid_body_table {
  border-top: 0; }
  .grid_container.fix-header .grid_body_table > tbody > tr:first-child > td {
    border-top: 0; }

.ui_check .ui_check_radio,
.ui_check .ui_check_checkbox {
  display: none; }

.ui_spinner > .ui_spinner_input {
  text-align: center; }

.ui_spinner.ui_spinner_horizontal .input-group-btn:first-child > .btn {
  border-right: 0; }

.ui_spinner.ui_spinner_vertical {
  display: inline-block;
  position: relative;
  overflow: hidden; }
  .ui_spinner.ui_spinner_vertical.ui_spinner_xs {
    width: 20px; }
    .ui_spinner.ui_spinner_vertical.ui_spinner_xs .btn {
      padding: 1px 4px;
      font-size: 12px; }
    .ui_spinner.ui_spinner_vertical.ui_spinner_xs .ui_spinner_input {
      padding: 3px 0; }
  .ui_spinner.ui_spinner_vertical.ui_spinner_md {
    width: 30px; }
    .ui_spinner.ui_spinner_vertical.ui_spinner_md .btn {
      padding: 3px 5px;
      font-size: 12px; }
    .ui_spinner.ui_spinner_vertical.ui_spinner_md .ui_spinner_input {
      padding: 3px 0; }
  .ui_spinner.ui_spinner_vertical.ui_spinner_lg {
    width: 40px; }
  .ui_spinner.ui_spinner_vertical > .form-control,
  .ui_spinner.ui_spinner_vertical > .input-group-btn {
    float: left;
    display: block;
    width: 100%; }
  .ui_spinner.ui_spinner_vertical > .input-group-btn > .btn {
    margin-left: 0;
    width: 100%; }
  .ui_spinner.ui_spinner_vertical > .input-group-btn:first-child > .btn {
    float: left;
    border-radius: 4px;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    border-bottom: 0; }
  .ui_spinner.ui_spinner_vertical > .ui_spinner_input {
    padding: 6px 0;
    height: 25px; }
  .ui_spinner.ui_spinner_vertical > .input-group-btn:last-child > .btn {
    float: left;
    border-radius: 4px;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    border-top: 0; }
  .ui_spinner.ui_spinner_vertical > .input-group-btn:first-child {
    top: 0; }
  .ui_spinner.ui_spinner_vertical > .input-group-btn:last-child {
    bottom: 0; }

.ui_datetimepicker_selector .dtp_body .dtp_timepicker table .ui_spinner .ui_spinner_btn, .ui_datetimepicker_selector .dtp_body .dtp_timepicker table .ui_spinner .ui_spinner_btn:active, .ui_datetimepicker_selector .dtp_body .dtp_timepicker table .ui_spinner .ui_spinner_btn:hover, .ui_datetimepicker_selector .dtp_body .dtp_timepicker table .ui_spinner .ui_spinner_btn:link {
  border: none;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  background: transparent; }

.ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table td:hover, .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table td.active {
  background-color: #4f93ce;
  color: white; }

.ui_datetimepicker_selector, .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table th, .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table td {
  border: 1px solid #e0e0e0; }

.ui_datetimepicker_selector {
  display: -moz-inline-stack;
  display: inline-block;
  vertical-align: middle;
  *vertical-align: auto;
  zoom: 1;
  *display: inline;
  background: white;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  -ms-border-radius: 5px;
  -o-border-radius: 5px;
  border-radius: 5px; }
  .ui_datetimepicker_selector .dtp_body,
  .ui_datetimepicker_selector .dtp_footer,
  .ui_datetimepicker_selector .dtp_header {
    width: 100%; }
  .ui_datetimepicker_selector .dtp_header {
    height: 30px;
    line-height: 30px;
    vertical-align: middle;
    display: table;
    border-bottom: 1px solid #e0e0e0; }
    .ui_datetimepicker_selector .dtp_header .dtp_selectors,
    .ui_datetimepicker_selector .dtp_header .dtp_toggler {
      display: table-cell; }
    .ui_datetimepicker_selector .dtp_header .dtp_toggler {
      width: 2em;
      font-size: 12px;
      color: #aaa;
      cursor: pointer; }
    .ui_datetimepicker_selector .dtp_header .dtp_preview {
      padding-left: 10px;
      text-align: left; }
    .ui_datetimepicker_selector .dtp_header .dtp_next {
      padding-right: 10px;
      text-align: right; }
    .ui_datetimepicker_selector .dtp_header .dtp_toggler:hover {
      color: #bbb; }
    .ui_datetimepicker_selector .dtp_header .dtp_selectors {
      text-align: center; }
  .ui_datetimepicker_selector .dtp_body {
    padding: 10px 10px;
    display: table; }
    .ui_datetimepicker_selector .dtp_body .dtp_calendar {
      width: 240px; }
      .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table {
        width: 100%; }
        .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table th {
          font-weight: bold;
          width: 14.28571%;
          font-size: 12px;
          text-align: center;
          vertical-align: middle;
          padding: 0;
          border-collapse: collapse;
          cursor: pointer;
          height: 25px;
          -webkit-user-select: none;
          -moz-user-select: none;
          user-select: none; }
        .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table td {
          color: #666666;
          width: 14.28571%;
          font-size: 12px;
          text-align: center;
          vertical-align: middle;
          padding: 0;
          border-collapse: collapse;
          cursor: pointer;
          height: 25px;
          -webkit-user-select: none;
          -moz-user-select: none;
          user-select: none; }
          .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table td.active {
            -webkit-box-shadow: #337ab7 0 1px 3px 1px inset;
            -moz-box-shadow: #337ab7 0 1px 3px 1px inset;
            box-shadow: #337ab7 0 1px 3px 1px inset; }
          .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table td.other-month {
            color: #aaa; }
          .ui_datetimepicker_selector .dtp_body .dtp_calendar .dtp_calendar_table td.other-month:hover {
            background-color: white;
            color: #666; }
    .ui_datetimepicker_selector .dtp_body .dtp_calendar,
    .ui_datetimepicker_selector .dtp_body .dtp_timepicker {
      display: table-cell; }
    .ui_datetimepicker_selector .dtp_body .dtp_timepicker {
      width: 180px;
      height: 100%;
      vertical-align: middle;
      text-align: center; }
      .ui_datetimepicker_selector .dtp_body .dtp_timepicker table {
        display: -moz-inline-stack;
        display: inline-block;
        vertical-align: middle;
        *vertical-align: auto;
        zoom: 1;
        *display: inline; }
        .ui_datetimepicker_selector .dtp_body .dtp_timepicker table .dtp_colon {
          padding: 0 6px; }
        .ui_datetimepicker_selector .dtp_body .dtp_timepicker table .ui_spinner {
          width: 40px; }
          .ui_datetimepicker_selector .dtp_body .dtp_timepicker table .ui_spinner .ui_spinner_btn .glyphicon-minus:before {
            content: "\e114"; }
          .ui_datetimepicker_selector .dtp_body .dtp_timepicker table .ui_spinner .ui_spinner_btn .glyphicon-plus:before {
            content: "\e113"; }
    .ui_datetimepicker_selector .dtp_body .dtp_timepicker table tr {
      line-height: 0; }
  .ui_datetimepicker_selector .dtp_footer {
    padding: 6px 10px;
    text-align: right;
    background-color: #f0f0f0;
    border-top: 1px solid #e0e0e0; }
  .ui_datetimepicker_selector .dtp_dropdown {
    display: -moz-inline-stack;
    display: inline-block;
    vertical-align: middle;
    *vertical-align: auto;
    zoom: 1;
    *display: inline; }
    .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_text {
      color: #333;
      font-weight: bold;
      font-size: 12px;
      text-decoration: none;
      cursor: pointer;
      padding: 0 5px; }
      .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_text .caret {
        border-width: 3px; }
    .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content {
      display: none;
      position: absolute;
      overflow: hidden;
      margin-top: -7px;
      border: 1px solid #e0e0e0;
      background-color: #fcfcfc; }
      .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content .mCSB_dragger_bar {
        margin: 1px; }
      .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content .mCSB_scrollTools {
        width: 4px; }
      .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul {
        list-style: none;
        padding: 0;
        margin: 0; }
        .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul > li {
          border-bottom: 1px solid #c7c7c7;
          font-size: 12px;
          line-height: 18px;
          padding: 2px 5px; }
          .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul > li:last-child {
            border-bottom: none; }
          .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul > li.active, .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul > li:hover {
            background-color: #4f93ce; }
            .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul > li.active a, .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul > li:hover a {
              color: white; }
          .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul > li.active {
            background-color: #4f93ce;
            -webkit-box-shadow: #3b87c8 0 1px 3px 1px inset;
            -moz-box-shadow: #3b87c8 0 1px 3px 1px inset;
            box-shadow: #3b87c8 0 1px 3px 1px inset; }
          .ui_datetimepicker_selector .dtp_dropdown .dtp_dropdown_content ul > li > a {
            cursor: pointer;
            color: #333;
            text-decoration: none; }
    .ui_datetimepicker_selector .dtp_dropdown.open .dtp_dropdown_content {
      display: block; }

.dtp_hide_datepicker .dtp_body {
  padding: 0; }

.dtp_hide_datepicker .dtp_body .dtp_calendar {
  display: none; }

.dtp_hide_timepicker .dtp_body .dtp_timepicker {
  display: none; }

.dtp_hide_datepicker .dtp_header {
  display: none; }

.ui_datetimepicker {
  position: relative; }
  .ui_datetimepicker .dtp_container {
    display: none;
    min-width: 440px; }
  .ui_datetimepicker.dtp_hide_timepicker .dtp_container {
    min-width: 260px; }
  .ui_datetimepicker.dtp_hide_datepicker .dtp_container {
    min-width: 181px; }
  .ui_datetimepicker.open .dtp_container {
    display: block;
    position: absolute;
    float: left;
    top: 100%;
    left: 0;
    z-index: 1000;
    margin-top: 6px;
    -webkit-background-clip: padding;
    -moz-background-clip: padding;
    background-clip: padding-box; }
    .ui_datetimepicker.open .dtp_container .ui_datetimepicker_selector {
      -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
      -moz-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
      -moz-border-radius-topleft: 0;
      -webkit-border-top-left-radius: 0;
      border-top-left-radius: 0; }
  .ui_datetimepicker.open .dtp_container:before {
    content: "";
    display: -moz-inline-stack;
    display: inline-block;
    vertical-align: middle;
    *vertical-align: auto;
    zoom: 1;
    *display: inline;
    width: 0;
    height: 0;
    border-width: 6px;
    border-style: solid;
    border-color: #e0e0e0;
    border-top-color: transparent;
    border-left-color: transparent;
    border-right-color: transparent;
    position: absolute;
    top: -11px;
    left: 9px; }
  .ui_datetimepicker.open .dtp_container:after {
    content: "";
    display: -moz-inline-stack;
    display: inline-block;
    vertical-align: middle;
    *vertical-align: auto;
    zoom: 1;
    *display: inline;
    width: 0;
    height: 0;
    border-width: 6px;
    border-style: solid;
    border-color: white;
    border-top-color: transparent;
    border-left-color: transparent;
    border-right-color: transparent;
    position: absolute;
    top: -10px;
    left: 9px; }
  .ui_datetimepicker.open.pull-right .dtp_container {
    right: 0;
    left: auto; }
    .ui_datetimepicker.open.pull-right .dtp_container .ui_datetimepicker_selector {
      -moz-border-radius-topright: 0;
      -webkit-border-top-right-radius: 0;
      border-top-right-radius: 0; }
  .ui_datetimepicker.open.pull-right .dtp_container:before,
  .ui_datetimepicker.open.pull-right .dtp_container:after {
    left: auto;
    right: 9px; }
  .ui_datetimepicker .dtp_viewer {
    display: block;
    text-align: left; }
  .ui_datetimepicker.dtp_inline .dtp_viewer {
    display: none; }
  .ui_datetimepicker.dtp_inline .dtp_container {
    display: -moz-inline-stack;
    display: inline-block;
    vertical-align: middle;
    *vertical-align: auto;
    zoom: 1;
    *display: inline; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
